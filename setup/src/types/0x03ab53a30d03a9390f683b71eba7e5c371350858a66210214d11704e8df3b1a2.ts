/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2, original address 0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import * as _0x2 from "@typemove/sui/builtin/0x2";

export namespace lbtc {
  export interface LBTC {
    dummy_field: boolean;
  }

  export namespace LBTC {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::lbtc::LBTC";

    const TYPE = new TypeDescriptor<LBTC>(LBTC.TYPE_QNAME);

    export function type(): TypeDescriptor<LBTC> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace multisig {
  export namespace builder {
    export function deriveMultisigAddress(
      tx: Transaction,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU16(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::multisig::derive_multisig_address",
        arguments: _args,
      });
    }
    export function ed25519KeyToAddress(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::multisig::ed25519_key_to_address",
        arguments: _args,
      });
    }
    export function isSenderMultisig(
      tx: Transaction,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU16(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::multisig::is_sender_multisig",
        arguments: _args,
      });
    }
    export function secp256k1KeyToAddress(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::multisig::secp256k1_key_to_address",
        arguments: _args,
      });
    }
    export function secp256r1KeyToAddress(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::multisig::secp256r1_key_to_address",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function deriveMultisigAddress(
      client: SuiClient,
      args: [string[], string[], number],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.deriveMultisigAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function ed25519KeyToAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.ed25519KeyToAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function isSenderMultisig(
      client: SuiClient,
      args: [string[], string[], number],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isSenderMultisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function secp256k1KeyToAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.secp256k1KeyToAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function secp256r1KeyToAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.secp256r1KeyToAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace pk_util {
  export namespace builder {
    export function isValidKey(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::pk_util::is_valid_key",
        arguments: _args,
      });
    }
    export function validatePks(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::pk_util::validate_pks",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function isValidKey(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isValidKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function validatePks(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.validatePks(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace treasury {
  export interface AdminCap {
    dummy_field: boolean;
  }

  export namespace AdminCap {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::AdminCap";

    const TYPE = new TypeDescriptor<AdminCap>(AdminCap.TYPE_QNAME);

    export function type(): TypeDescriptor<AdminCap> {
      return TYPE.apply();
    }
  }

  export interface BurnEvent<T0> {
    amount: bigint;
    from: string;
  }

  export namespace BurnEvent {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::BurnEvent";

    const TYPE = new TypeDescriptor<BurnEvent<any>>(BurnEvent.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<BurnEvent<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface BurnEventInstance
    extends TypedEventInstance<BurnEvent<any>> {
    data_decoded: BurnEvent<any>;
    type_arguments: [string];
  }

  export interface ControlledTreasury<T0> {
    id: _0x2.object$.UID;
    admin_count: number;
    treasury_cap: _0x2.coin.TreasuryCap<T0>;
    deny_cap: _0x2.coin.DenyCapV2<T0>;
    roles: _0x2.bag.Bag;
  }

  export namespace ControlledTreasury {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::ControlledTreasury";

    const TYPE = new TypeDescriptor<ControlledTreasury<any>>(
      ControlledTreasury.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<ControlledTreasury<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface MintEvent<T0> {
    amount: bigint;
    to: string;
    tx_id: number[];
    index: number;
  }

  export namespace MintEvent {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::MintEvent";

    const TYPE = new TypeDescriptor<MintEvent<any>>(MintEvent.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<MintEvent<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface MintEventInstance
    extends TypedEventInstance<MintEvent<any>> {
    data_decoded: MintEvent<any>;
    type_arguments: [string];
  }

  export interface MinterCap {
    limit: bigint;
    epoch: bigint;
    left: bigint;
  }

  export namespace MinterCap {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::MinterCap";

    const TYPE = new TypeDescriptor<MinterCap>(MinterCap.TYPE_QNAME);

    export function type(): TypeDescriptor<MinterCap> {
      return TYPE.apply();
    }
  }

  export interface PauserCap {
    dummy_field: boolean;
  }

  export namespace PauserCap {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::PauserCap";

    const TYPE = new TypeDescriptor<PauserCap>(PauserCap.TYPE_QNAME);

    export function type(): TypeDescriptor<PauserCap> {
      return TYPE.apply();
    }
  }

  export interface RoleKey<T0> {
    owner: string;
  }

  export namespace RoleKey {
    export const TYPE_QNAME =
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::treasury::RoleKey";

    const TYPE = new TypeDescriptor<RoleKey<any>>(RoleKey.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<RoleKey<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface RoleKeyInstance extends TypedEventInstance<RoleKey<any>> {
    data_decoded: RoleKey<any>;
    type_arguments: [string];
  }

  export namespace builder {
    export function addCapability<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::add_capability",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function burn<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::burn",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function deconstruct<T0 = any>(
      tx: Transaction,
      args: [treasury.ControlledTreasury<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::deconstruct",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function disableGlobalPause<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU16(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::disable_global_pause",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function enableGlobalPause<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU16(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::enable_global_pause",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function hasCap<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::has_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isGlobalPauseEnabled<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::is_global_pause_enabled",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function listRoles<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::list_roles",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintAndTransfer<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPureU16(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU32(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::mint_and_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.DenyCapV2<T0> | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newAdminCap(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::new_admin_cap",
        arguments: _args,
      });
    }
    export function newMinterCap(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::new_minter_cap",
        arguments: _args,
      });
    }
    export function newPauserCap(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::new_pauser_cap",
        arguments: _args,
      });
    }
    export function removeCapability<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::remove_capability",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function share<T0 = any>(
      tx: Transaction,
      args: [treasury.ControlledTreasury<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x03ab53a30d03a9390f683b71eba7e5c371350858a66210214d11704e8df3b1a2::treasury::share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addCapability<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, T1],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addCapability(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function burn<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deconstruct<T0 = any>(
      client: SuiClient,
      args: [treasury.ControlledTreasury<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.DenyCapV2<T0>, _0x2.bag.Bag]
      >
    > {
      const tx = new Transaction();
      builder.deconstruct(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.DenyCapV2<T0>, _0x2.bag.Bag]
      >(inspectRes);
    }
    export async function disableGlobalPause<T0 = any>(
      client: SuiClient,
      args: [string, string, string[], string[], number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.disableGlobalPause(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function enableGlobalPause<T0 = any>(
      client: SuiClient,
      args: [string, string, string[], string[], number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.enableGlobalPause(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function hasCap<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.hasCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isGlobalPauseEnabled<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isGlobalPauseEnabled(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function listRoles<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new Transaction();
      builder.listRoles(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function mintAndTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string,
        bigint,
        string,
        string,
        string[],
        string[],
        number,
        string[],
        number,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.mintAndTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [_0x2.coin.TreasuryCap<T0>, _0x2.coin.DenyCapV2<T0>, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[treasury.ControlledTreasury<T0>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [treasury.ControlledTreasury<T0>]
      >(inspectRes);
    }
    export async function newAdminCap(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[treasury.AdminCap]>> {
      const tx = new Transaction();
      builder.newAdminCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [treasury.AdminCap]
      >(inspectRes);
    }
    export async function newMinterCap(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[treasury.MinterCap]>> {
      const tx = new Transaction();
      builder.newMinterCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [treasury.MinterCap]
      >(inspectRes);
    }
    export async function newPauserCap(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[treasury.PauserCap]>> {
      const tx = new Transaction();
      builder.newPauserCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [treasury.PauserCap]
      >(inspectRes);
    }
    export async function removeCapability<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeCapability(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function share<T0 = any>(
      client: SuiClient,
      args: [treasury.ControlledTreasury<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.share(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"lbtc":{"fileFormatVersion":6,"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","name":"lbtc","friends":[],"structs":{"LBTC":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"multisig":{"fileFormatVersion":6,"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","name":"multisig","friends":[],"structs":{},"exposedFunctions":{"derive_multisig_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Vector":"U8"}},{"Vector":"U8"},"U16"],"return":["Address"]},"ed25519_key_to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":["Address"]},"is_sender_multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Vector":"U8"}},{"Vector":"U8"},"U16",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"secp256k1_key_to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":["Address"]},"secp256r1_key_to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":["Address"]}}},"pk_util":{"fileFormatVersion":6,"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","name":"pk_util","friends":[{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","name":"multisig"}],"structs":{},"exposedFunctions":{"is_valid_key":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":["Bool"]},"validate_pks":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Vector":"U8"}}}],"return":[]}}},"treasury":{"fileFormatVersion":6,"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","name":"treasury","friends":[],"structs":{"AdminCap":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"BurnEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"amount","type":"U64"},{"name":"from","type":"Address"}]},"ControlledTreasury":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"admin_count","type":"U8"},{"name":"treasury_cap","type":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"name":"deny_cap","type":{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}},{"name":"roles","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"MintEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"amount","type":"U64"},{"name":"to","type":"Address"},{"name":"tx_id","type":{"Vector":"U8"}},{"name":"index","type":"U32"}]},"MinterCap":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"limit","type":"U64"},{"name":"epoch","type":"U64"},{"name":"left","type":"U64"}]},"PauserCap":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"RoleKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"owner","type":"Address"}]}},"exposedFunctions":{"add_capability":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},"Address",{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"burn":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deconstruct":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}]},"disable_global_pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"Vector":{"Vector":"U8"}},{"Vector":"U8"},"U16",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"enable_global_pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"Vector":{"Vector":"U8"}},{"Vector":"U8"},"U16",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"has_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":["Bool"]},"is_global_pause_enabled":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}}],"return":["Bool"]},"list_roles":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[{"Vector":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"mint_and_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},"U64","Address",{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"Vector":{"Vector":"U8"}},{"Vector":"U8"},"U16",{"Vector":"U8"},"U32",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}]},"new_admin_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"AdminCap","typeArguments":[]}}]},"new_minter_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"MinterCap","typeArguments":[]}}]},"new_pauser_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"PauserCap","typeArguments":[]}}]},"remove_capability":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040","module":"treasury","name":"ControlledTreasury","typeArguments":[{"TypeParameter":0}]}}],"return":[]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040",
    );
  }
}

loadAllTypes(defaultMoveCoder());
