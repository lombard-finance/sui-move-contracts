import {
  SHARED_CONSORTIUM,
  suiClient,
} from "../config";
import { getTestMultisigConfig } from "../helpers/getMultisigConfig";
import { addInitialValidatorSet } from "../utils/addInitialValidatorSet";
import { validateAndStorePayload } from "../utils/validateAndStorePayload";
import { isPayloadUsed } from "../utils/isPayloadUsed";
import { nextValidatorSet } from "../utils/nextValidatorSet";

const initValsetPayload = "4aab1d6f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004104ba5734d8f7091719471e7f7ed6b9df170dc70cc661ca05e688601ad984f068b0d67351e5f06073092499336ab0839ef8a521afd334e53807205fa2f08eec74f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041049d9031e97dd78ff8c15aa86939de9b1e791066a0224e331bc962a2099a7b1f0464b8bbafe1535f2301c72c2cb3535b172da30b02686ab0393d348614f157fbdb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410420b871f3ced029e14472ec4ebc3c0448164942b123aa6af91a3386c1c403e0ebd3b4a5752a2b6c49e574619e6aa0549eb9ccd036b9bbc507e1f7f9712a236092000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"

const payloadHex = "f2e73f7c000000000000000000000000000000000000000000000000000000000000000953ac220c4c7f0e8ac4266b54779f8a5e772705390a43f4ea2a59cd7c10305e4d0000000000000000000000000000000000000000000000000000000005f5e1008d3427b7fa9f07adb76208188930d49341246cef989a20b45a4619fd2ba6810a0000000000000000000000000000000000000000000000000000000000000000";
const signatures = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000405ac3b079f374485585c941449e67e4fd33217c4a5579dc61f9d7b2704a00820c29d588f2981f7a2a429cf2df97ed1ead40f37d1c4fc45257ee37592861b4957000000000000000000000000000000000000000000000000000000000000000404588a44b8309f6602515e4aa5e6868b4b8131bea1a3d7e137049113b31c2ea384a3cea2e1ce7ecdd30cf6caabd22282dc65324de0c14e857c4850c981935a0260000000000000000000000000000000000000000000000000000000000000040b31e60fd4802a7d476dc9a75b280182c718ffd8a0ddf4630b4a91b4450a2c3ca5f9f34229c2c9da7a86881fefe7f41ffcafd96b6157da2729f59c4856e2d437a";
const hashHex = "89cf3b8247cc333fcf84109cee811a81d2ed1c14af1701b7716cbb0611e51979";

const nextValsetPayloadHex = "4aab1d6f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004104bf6ee64a8d2fdc551ec8bb9ef862ef6b4bcb1805cdc520c3aa5866c0575fd3b514c5562c3caae7aec5cd6f144b57135c75b6f6cea059c3d08d1f39a9c227219d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410437b84de6947b243626cc8b977bb1f1632610614842468dfa8f35dcbbc55a515e47f6fe259cffc671a719eaef444a0d689b16a90051985a13661840cf5e221503000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041049a4ab212cb92775d227af4237c20b81f4221e9361d29007dfc16c79186b577cb6ba3f1b582ad0b5572c93f47e7506d66df7f2af05fa1828de0e511aac7b97828000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
const nextValsetProofHex = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000040760f6ac1f0ef347257731b26c1d66eba281c6437abe2ad9b49686fc8c5808c9f3604c3a2bd56e41f218d0ab5b42a9bf975ea80f50e4376dedc802bec978493850000000000000000000000000000000000000000000000000000000000000040b06cc31bc0013797e9db375b23bf4845060582bbf9fddfa11054f940fab5537932beaf8614ea478b59282a28b05ae447b3f72b53a5463a9b9a27f7471dae9c40000000000000000000000000000000000000000000000000000000000000004054225d664e28f047c30fca437c550a9bb033b2b79e0f91e9423f8eedcb6b810f31c0c7178517580d20a27062aa61cb4dd7fe06cbf37f981ed47a14ff4e84a770"

const nextPayloadHex = "f2e73f7c000000000000000000000000000000000000000000000000000000000000000953ac220c4c7f0e8ac4266b54779f8a5e772705390a43f4ea2a59cd7c10305e4d0000000000000000000000000000000000000000000000000000000005f5e1007be82fe6b41e7a312d9dc8b9ad73bcec5e4235372289cbd78667d40d51bd600e0000000000000000000000000000000000000000000000000000000000000000"
const nextSignatures = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004047791ea31e5fd811d966139cde444476c9788315921dcfa72b0940602b60b861396e737a270c46bc8ddc79b8f9810f51a830ac151c167e85b8e43878fb9c70a900000000000000000000000000000000000000000000000000000000000000406cdedcff3afc19e38477154a8b256d790652e32f48bca7bfe5f129a1c7314d1c30f5348af4842cdd82c0be6b36bc3b301b177a961f251bba0ab92647feb0bf3c00000000000000000000000000000000000000000000000000000000000000400f38fc56a305e35aaff837bde375d31a969b57e8f8abe68dbed1a20ad68f99ea0b3fee8af26bfc068344a37dbbc3eb8184f3baa9479ad94a1378a1f9cbd75ac3"
const nextHashHex = "b2a39d7f887e80ad80ef0dca70474ae902a66e08569862593243aebdf34c9fbe"

async function e2eValidateAndStorePayload() {
  const multisigConfig = getTestMultisigConfig();

  try {

    // Step1: Set the initial validator set
    console.log("Setting the first validator set...");
    const valsetPayload = Array.from(Buffer.from(initValsetPayload, "hex"));

    const addValidatorSetResult = await addInitialValidatorSet(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      valsetPayload,
      { multisig: multisigConfig }
    );

    console.log("Validators set successfully:", addValidatorSetResult);

    await suiClient.waitForTransaction({ digest: addValidatorSetResult.digest });

    // Step2: Validate and store the payload
    // In a real case scenario, this step will get executed by the smart contract in the claim function.
    // For testing purposes we are executing this flow from client.
    console.log("Validating and storing the payload...");
    
    const payload = Array.from(Buffer.from(payloadHex, "hex"));
    const proof = Array.from(Buffer.from(signatures, "hex"));

    const validateAndStorePayloadResult = await validateAndStorePayload(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      payload,
      proof,
      { multisig: multisigConfig }
    );

    console.log("Payload validated and stored successfully:", validateAndStorePayloadResult);
    await suiClient.waitForTransaction({ digest: validateAndStorePayloadResult.digest });

    // Step3: Check if the payload is stored
    console.log("Checking if the payload is stored...");
    const isPayloadUsedResult = await isPayloadUsed(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      hashHex,
      // can be anyone
      multisigConfig.users[0].keypair.toSuiAddress()
    );

    console.log("Payload stored:", isPayloadUsedResult);

    // Step4: Configure the next validator set
    console.log("Setting the next validator set...");

    const nextValsetPayload = Array.from(Buffer.from(nextValsetPayloadHex, "hex"));
    const nextValsetProof = Array.from(Buffer.from(nextValsetProofHex, "hex"));

    const nextValidatorSetResult = await nextValidatorSet(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      nextValsetPayload,
      nextValsetProof,
      { multisig: multisigConfig }
    )

    console.log("Validators set successfully:", nextValidatorSetResult);
    await suiClient.waitForTransaction({ digest: nextValidatorSetResult.digest });

    // Step5: Validate and store the next payload signed by the new validator set
    console.log("Validating and storing the next payload...");
    
    const nextPayload = Array.from(Buffer.from(nextPayloadHex, "hex"));
    const nextProof = Array.from(Buffer.from(nextSignatures, "hex"));

    const validateAndStoreNextPayloadResult = await validateAndStorePayload(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      nextPayload,
      nextProof,
      { multisig: multisigConfig }
    );

    console.log("Next payload validated and stored successfully:", validateAndStoreNextPayloadResult);
    await suiClient.waitForTransaction({ digest: validateAndStoreNextPayloadResult.digest });
  
    // Step6: Check if the next payload is stored
    console.log("Checking if the next payload is stored...");
    const isNextPayloadUsedResult = await isPayloadUsed(
      suiClient,
      SHARED_CONSORTIUM, // Consortium object
      nextHashHex,
      // can be anyone
      multisigConfig.users[0].keypair.toSuiAddress()
    );

    console.log("Next payload stored:", isNextPayloadUsedResult);

  } catch (error) {
    console.error(
      "Error in E2E Test: Validate and Store Payoload Flow:",
      error
    );
  }
}

e2eValidateAndStorePayload();